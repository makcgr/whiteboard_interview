Source: Daily Coding Problem
Origin: Microsoft

Suppose an arithmetic expression is given as a binary tree. Each leaf is an integer and each internal node is one of '+', '−', '∗', or '/'.

Given the root to such a tree, write a function to evaluate it.

For example, given the following tree:

    *
   / \
  +    +
 / \  / \
3  2  4  5
You should return 45, as it is (3 + 2) * (4 + 5).


Here's a starting point:

class Node(object):
  def __init__(self, val):
    self.val = val
    self.left = None
    self.right = None

  def __repr__(self):
    # string representation
    return self.val


class Solution(object):
  def SolveExpression(self, root):
    return None


root = Node('*')
root.left = Node('+')
root.left.left = Node(3)
root.left.right = Node(2)

root.right = Node('+')
root.right.left = Node(4)
root.right.right = Node(5)

result = Solution().SolveExpression(root)
print(result)
# should print 45
